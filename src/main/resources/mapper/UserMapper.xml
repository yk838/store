<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.store.mapper.UserMapper">
    <!--自定义映射规则：resultMap标签来完成映射规则的定义-->
    <!--
        id的属性：标签给这个映射负责分配一个唯一的id值，对应的就是resultMap="id属性的值"属性的取值
        type属性：取值是一个类，表示的是数据库中的查询结果与java中的哪个实体类进行结果的映射
        -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
        <!--将表的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以忽略不写-->
        <!--
            配合完成名称不一致的映射
            column属性：表示中的资源名称
            property属性: 表示实体类中的属性资源-->
        <!--在定义的映射规则时，主键时不可以省略的-->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>
    <!--id属性：表述映射的接口中的方法的名称，直接在标签的内容来编写SQL语句-->
    <!--useGeneratedKeys 开启主键自增  keyProperty主键为 uid -->
    <insert id="insert"  useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user (
            uid, username,password,salt,phone,email,
            gender,avatar,is_delete,created_User,
            created_time,modified_user,modified_time
	    )values(
	    #{uid}, #{username},#{password},#{salt},#{phone},#{email},
            #{gender},#{avatar},#{isDelete},#{createdUser},
            #{createdTime},#{modifiedUser},#{modifiedTime}
	    )
    </insert>

    <!-- 根据uid更新用户的密码：
	     Integer updatePasswordByUid(
		    @Param("uid") Integer uid,
		    @Param("password") String password,
		    @Param("modifiedUser") String modifiedUser,
		    @Param("modifiedTime") Date modifiedTime) -->
    <update id="updatePasswordByUid">
        UPDATE
            t_user
        SET
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>
    <update id="updateInfoByUid">
        update t_user
            set
                <if test="phone!= null">phone = #{phone},</if>
                <if test="email!= null">email = #{email},</if>
                <if test="gender!= null">gender = #{gender},</if>
                modified_user = #{modifiedUser},
                modified_time = #{modifiedTime}
            where uid = #{uid}
    </update>
    <update id="updateAvatarByUid">
         UPDATE
            t_user
        SET
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>
    <!--select语句在执行的时候，查询的是一个对象，多个对象-->
    <!--
        resultType: 表示查询的结果集类型， 只需要指定对应映射类的类型，并且包含完成包的接口
        resultMaq: 标签当表的资源和类的对象属性的字段名称不一致时，来自定义查询结果集的映射规则
    -->
    <select id="findByUsername" resultMap="UserEntityMap">
        select * from t_user where username = #{username}
    </select>
    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <select id="findByUid" resultMap="UserEntityMap">
        SELECT
            *
        FROM
            t_user
        WHERE
            uid = #{uid}
    </select>
    <select id="selectAll" resultType="com.cy.store.entity.User">
        select * from t_user
    </select>
    <select id="selectPage" resultType="com.cy.store.entity.User">
                select * from t_user
    </select>
</mapper>